### Configuration file for the soupault website generator ###

## Global settings

[settings]
  # This configuration only works with soupault 4.0.0 or later
  soupault_version = "4.0.0"

  strict = true
  verbose = true
  debug = true

  # Force "clean URLs", i.e. book/foo.md becomes build/foo/index.html
  # (Clean URLs is the default, you can set it to false if you don't like it)
  clean_urls = true

  # Where generated files go
  build_dir = "public/"

  # Where page files are stored
  site_dir = "source/"

  # Where in the template the page content is inserted
  default_content_selector = "content"

  default_template_file = "templates/main.html"

  # Page considered the section index
  index_page = "index"

  # Files that are considered pages and processed
  # All other files are considered assets and copied unchanged
  page_file_extensions = ["html", "md"]

  # assume HTML5
  doctype = "<!DOCTYPE html>"

## Preprocessors convert non-HTML files to HTML
## for further processing by soupault
[preprocessors]
  md = "pandoc -f markdown -t html"
  
# search input file for "blockquote" which is taken to be an image file with positioning data
# e.g. > in-windsor 51 30
# it means you must be careful using blockquotes for real in your markup 
# as the first one will be interpreted as an image filename and deleted.
[hooks.pre-process]
  lua_source = '''
    blockquote = HTML.select_one(page, "blockquote p")
    details = HTML.inner_text(blockquote)
    details = Regex.split(details, " ")
    image_name = details[1]
    hpos = details[2]
    vpos = details[3]
    
    if (hpos == nil) then 
      hpos = 0
      vpos = 0
    end
    if (vpos == nil) then
      vpos = 0
    end
    
    Sys.write_file("/tmp/tt", format("<img class='banner' style='object-position: %s%% %s%%;' src='/img/%s' />", hpos, vpos, image_name))

    Log.debug(format("Image file name set to \"%s\"", image_name))
    
    media = HTML.select(page, "dl")
    local i = 1
    while media[i] do
      HTML.add_class(media[i], "media__inner")
      i = i + 1
    end
'''

## Widgets

# remove image filename if any
[widgets.remove-image-name]
  widget = "delete_element"
  selector = "blockquote"

# Takes the content of the first <h1> and inserts it into the <title>
[widgets.page-title]
  widget = "title"
  selector = "h1"
  default = "Title needed!"
  
[widgets.insert-usual-logo]
  widget = "insert_html"
  selector = "logo"
  html = """   
    <a href='/'><img class='logo' src='/img/jslogo-512x512-1.png'></a>
"""

[widgets.insert-header-picture]
  widget = "include"
  file = "/tmp/tt"
  selector = "banner"
   
[widgets.insert-css]
  widget = "insert_html"
  selector = "head"
  html = """   
    <link rel="stylesheet" href="/css/js.css">
"""

[widgets.wrap-media]
  widget = "wrap"
  selector = "dl"
  wrap_all = true
  wrapper = """
    <div class="media">
    </div>  
"""

[widgets.table-of-contents]
  widget = "toc"

  # Required: where to insert the ToC
  selector = "toc"

  # Optional: exclude headings that match certain CSS selectors from the ToC
  # ignore_heading_selectors = []

  # Optional: minimum and maximum levels, defaults are 1 and 6 respectively
  min_level = 2
  max_level = 6

  # Optional: use <ol> instead of <ul> for ToC lists
  # Default is false
  numbered_list = false

  # Optional: Class for the ToC list element, default is none
  toc_list_class = "toc"

  # Optional: append the heading level to the ToC list class
  # In this example list for level 2 would be "toc-2"
  toc_class_levels = false

  # Optional: Insert "link to this section" links next to headings
  heading_links = true

  # Optional: text for the section links
  # Default is "#"
  heading_link_text = ""

  # Optional: class for the section links
  # Default is none
  heading_link_class = "here"

  # Optional: insert the section link after the header text rather than before
  # Default is false
  heading_links_append = false

  # Maximum level for headings to create section links for. Can be greater than max_level
  # Implicitly defaults to max_level
  # max_heading_link_level = 2

  # Optional: use header text slugs for anchors
  # Default is false
  use_heading_slug = true

  # Only replace non-whitespace characters when generating heading ids
  soft_slug = false

  # Force heading ids to lowercase
  slug_force_lowercase = true

  # You can redefine the whole slugification process using these options
  slug_regex = '[^a-zA-Z0-9\-]'
  slug_replacement_string = "-"

  # Optional: use unchanged header text for anchors
  # Default is false
  use_heading_text = false

  # Place nested lists inside a <li> rather than next to it
  valid_html = false

  # Exclude headings that match certain selectors from the ToC
  ignore_heading_selectors = [".notoc"]
