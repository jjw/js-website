### Configuration file for the soupault website generator ###

## Global settings

[settings]
  # This configuration only works with soupault 4.0.0 or later
  soupault_version = "4.0.0"

  strict = true
  verbose = true
  debug = true
  
  complete_page_selector = "html"
  
  # Force "clean URLs", i.e. book/foo.md becomes build/foo/index.html
  # (Clean URLs is the default, you can set it to false if you don't like it)
  clean_urls = true

  # Where generated files go
  build_dir = "public/"

  # Where page files are stored
  site_dir = "source/"

  # Where in the template the page content is inserted
  default_content_selector = "content"

  default_template_file = "templates/main.html"

  # Page considered the section index
  index_page = "index"

  # Files that are considered pages and processed
  # All other files are considered assets and copied unchanged
  page_file_extensions = ["html", "md"]

  # assume HTML5
  doctype = "<!DOCTYPE html>"

## Preprocessors convert non-HTML files to HTML for further processing by soupault
## this script removes yaml_frontmatter and inserts it into the template.
[preprocessors]
  md = "/home/jjw/Code/bin/pandoc+yaml.sh"
  
[hooks.pre-process]
  lua_source = '''
    -- "Definition lists" are overloaded to combine images and text.
    -- see also [widgets.wrap-media]
    
    media = HTML.select(page, "dl")
    local i = 1
    while media[i] do
      HTML.add_class(media[i], "media__inner")
      i = i + 1
    end
'''
  
## Widgets

[widgets.wrap-media]
  widget = "wrap"
  selector = "dl"
  wrap_all = true
  wrapper = "<div class='media'> </div>"
  
# Takes the content of the first <h1> and inserts it into the <title>
# provided <title> is empty.
[widgets.page-title]
  widget = "title"
  selector = "h1"
  default = "Title needed!"
  
[widgets.insert-toc-header]
  path_regex = "history"
  widget = "insert_html"
  action = "insert_before"
  selector = "toc"
  html = "<h3>Contents</h3>"

[widgets.table-of-contents]
  path_regex = "history"
  widget = "toc"
  selector = "toc"
  # ignore_heading_selectors = []
  # Optional: minimum and maximum levels, defaults are 1 and 6 respectively
  min_level = 2
  max_level = 2
  numbered_list = false
  toc_list_class = "toc"

  # Optional: append the heading level to the ToC list class
  # In this example list for level 2 would be "toc-2"
  toc_class_levels = false
  # Optional: Insert "link to this section" links next to headings
  heading_links = true
  # Optional: text for the section links
  # Default is "#"
  heading_link_text = ""
  # Optional: class for the section links
  # Default is none
  heading_link_class = "here"
  # Optional: insert the section link after the header text rather than before
  # Default is false
  heading_links_append = false

  # Maximum level for headings to create section links for. Can be greater than max_level
  # Implicitly defaults to max_level
  # max_heading_link_level = 2
  # Optional: use header text slugs for anchors
  # Default is false
  use_heading_slug = true
  # Only replace non-whitespace characters when generating heading ids
  soft_slug = false
  # Force heading ids to lowercase
  slug_force_lowercase = true
  # You can redefine the whole slugification process using these options
  slug_regex = '[^a-zA-Z0-9\-]'
  slug_replacement_string = "-"
  # Optional: use unchanged header text for anchors
  # Default is false
  use_heading_text = false
  # Place nested lists inside a <li> rather than next to it
  valid_html = false
  # Exclude headings that match certain selectors from the ToC
  ignore_heading_selectors = [".notoc"]
